{"version":3,"sources":["store/effects.ts","store/index.ts","store/update.ts","store/model.ts","components/FeedList.tsx","components/PanImage.tsx","components/Button.tsx","components/Space.tsx","components/Card.tsx","components/Search.tsx","store/selectors.ts","components/FocusedCard.tsx","index.tsx"],"names":["rootSaga","fetchFeedSaga","call","all","takeLatest","select","model","page","fetchFeedPaginated","images","put","type","payload","a","fetch","process","then","r","json","data","saga","createSagaMiddleware","store","createStore","focusedCardId","currentSearchValue","message","cardId","value","composeWithDevTools","applyMiddleware","run","useTSelector","useSelector","useTDispatch","useDispatch","rowStaticStyle","display","FeedList","items","onEndReached","columns","height","width","renderItem","onStartReached","endOffset","itemHeight","gap","rows","Math","ceil","length","rowHeight","scrollHeightTotal","style","overflowX","onScroll","scrollOffset","scrollDirection","itemCount","itemSize","index","renders","columnIndex","datum","push","key","gridTemplateColumns","gridGap","paddingBottom","PanImage","React","memo","uri","fallback","useMeasure","ref","rWidth","rHeight","useSpring","x","y","config","slow","set","bind","useDrag","movement","mx","my","down","xy","event","document","ontouchmove","e","preventDefault","initial","getValue","eventOptions","bounds","left","right","bottom","top","filterTaps","scaleX","scaleLinear","domain","range","scaleY","div","css","touchAction","backgroundPosition","interpolate","Button","props","theme","dark","dark2","paddingVertical","paddingHorizontal","radius","children","Space","Card","id","title","authorImage","onCardClicked","link","flex","background","href","onClick","Search","onSearchChanged","placeholder","light","onChange","target","selectCurrentSearchValue","createSelector","state","selectFocusedCard","find","image","options","shouldSort","threshold","location","distance","maxPatternLength","minMatchCharLength","includeScore","includeMatches","keys","selectImages","searchValue","fuse","Fuse","search","FocusedCard","authorLink","author","description","from","transform","overflow","light2","Main","effectiveConnectionType","useNetworkStatus","numberOfLogicalProcessors","useHardwareConcurrency","dispatch","focusedCard","renderCard","item","mode","user","links","html","username","color","profile_image","large","urls","regular","thumb","render","getElementById"],"mappings":"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","file":"static/js/main.a6a16cbe.chunk.js","sourcesContent":["import { takeLatest, all, call, select, put } from \"redux-saga/effects\";\nimport { Message } from \"./message\";\nimport { Model } from \"./model\";\n\nexport function* rootSaga() {\n  yield call(fetchFeedSaga);\n  yield all([takeLatest<Message>(\"feed end reached\", fetchFeedSaga)]);\n}\n\nfunction* fetchFeedSaga() {\n  const page = yield select((model: Model) => model.page);\n  const images: Image[] = yield call(fetchFeedPaginated, page);\n  yield put({\n    type: \"[saga] images fetched\",\n    payload: {\n      images\n    }\n  });\n}\nasync function fetchFeedPaginated(page: number) {\n  const data: Image[] = await fetch(\n    `https://api.unsplash.com/photos/?client_id=${process.env.REACT_APP_UNSPLASH_PUBLIC_KEY}&page=${page}`\n  ).then(r => r.json());\n  return data;\n}\n\nexport type Image = {\n  id: string;\n  created_at: string;\n  updated_at: string;\n  width: number;\n  height: number;\n  color: string;\n  description: string;\n  alt_description: string;\n  urls: {\n    small: string;\n    regular: string;\n    full: string;\n    raw: string;\n    thumb: string;\n  };\n  links: {\n    self: string;\n    html: string;\n  };\n  categories: string[];\n  user: User;\n};\ntype User = {\n  id: string;\n  username: string;\n  name: string;\n  first_name: string;\n  last_name: string;\n  links: {\n    self: string;\n    html: string;\n  };\n  profile_image: {\n    small: string;\n    medium: string;\n    large: string;\n  };\n};\n","import { createStore, applyMiddleware, Dispatch } from \"redux\";\nimport createSagaMiddleware from \"redux-saga\";\nimport { update } from \"./update\";\nimport { TypedUseSelectorHook, useSelector, useDispatch } from \"react-redux\";\nimport { Model } from \"./model\";\nimport { Message } from \"./message\";\nimport { rootSaga } from \"./effects\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\n\nconst saga = createSagaMiddleware();\n\nexport const store = createStore(\n  update,\n  composeWithDevTools(applyMiddleware(saga))\n);\n\nsaga.run(rootSaga);\n\nexport const useTSelector: TypedUseSelectorHook<Model> = useSelector;\nexport const useTDispatch = useDispatch as () => Dispatch<Message>;\n","import { Model, initialModel } from \"./model\";\nimport { Message } from \"./message\";\n\nexport function update(model: Model = initialModel(), message: Message): Model {\n  switch (message.type) {\n    case \"[saga] images fetched\": {\n      return {\n        ...model,\n        images: [...model.images, ...message.payload.images]\n      };\n    }\n    case \"feed end reached\": {\n      return {\n        ...model,\n        page: model.page + 1\n      };\n    }\n    case \"card clicked\": {\n      return {\n        ...model,\n        focusedCardId: message.payload.cardId\n      };\n    }\n    case \"dismiss focused card clicked\": {\n      return {\n        ...model,\n        focusedCardId: null\n      };\n    }\n    case \"search value changed\": {\n      return {\n        ...model,\n        currentSearchValue: message.payload.value\n      };\n    }\n    default: {\n      return model;\n    }\n  }\n}\n","import { Image } from \"./effects\";\n\nexport type Model = {\n  page: number;\n  images: Image[];\n  focusedCardId: string | null;\n  currentSearchValue: string | null;\n};\n\nexport function initialModel(): Model {\n  return {\n    images: [],\n    page: 1,\n    focusedCardId: null,\n    currentSearchValue: null\n  };\n}\n","import * as React from \"react\";\nimport { FixedSizeList } from \"react-window\";\n\nconst rowStaticStyle = {\n  display: \"grid\"\n};\n\ntype Props<T> = {\n  items: T[];\n  onEndReached: () => void;\n  onStartReached: () => void;\n  columns?: number;\n  height: number;\n  width: number;\n  renderItem: (item: T) => React.ReactChild;\n  endOffset?: number;\n  itemHeight?: number;\n  gap?: number;\n};\nexport function FeedList<T>({\n  items,\n  onEndReached,\n  columns = 3,\n  height,\n  width,\n  renderItem,\n  onStartReached,\n  endOffset = 0,\n  itemHeight,\n  gap = 5\n}: Props<T>) {\n  const rows = Math.ceil(items.length / columns);\n  const rowHeight = itemHeight || height;\n  const scrollHeightTotal = rows * rowHeight - (height - (itemHeight || 0));\n  return (\n    <FixedSizeList\n      style={{\n        overflowX: \"hidden\",\n        width,\n        height\n      }}\n      width={width}\n      height={height}\n      onScroll={({ scrollOffset, scrollDirection }) => {\n        if (scrollOffset === 0 && scrollDirection === \"backward\")\n          onStartReached();\n        else if (\n          scrollOffset >= scrollHeightTotal - rowHeight - endOffset &&\n          scrollDirection === \"forward\"\n        )\n          onEndReached();\n      }}\n      itemCount={rows}\n      itemSize={rowHeight}\n    >\n      {({ style, index }) => {\n        const renders: React.ReactChild[] = [];\n        for (let columnIndex = 0; columnIndex < columns; columnIndex++) {\n          const datum = items[index * columns + columnIndex];\n          if (datum) renders.push(renderItem(datum));\n        }\n        return (\n          <div\n            key={index}\n            style={{\n              ...style,\n              ...rowStaticStyle,\n              gridTemplateColumns: `repeat(${columns}, 1fr)`,\n              gridGap: gap,\n              paddingBottom: gap\n            }}\n          >\n            {renders}\n          </div>\n        );\n      }}\n    </FixedSizeList>\n  );\n}\n","import React from \"react\";\nimport { css } from \"@emotion/core\";\nimport { animated, useSpring, interpolate, config } from \"react-spring\";\nimport { useDrag } from \"react-use-gesture\";\nimport { scaleLinear } from \"d3-scale\";\nimport useMeasure from \"react-use-measure\";\n\ntype Props = {\n  uri: string;\n  fallback?: string;\n};\n\nexport const PanImage = React.memo(function CardComponent({\n  uri,\n  fallback\n}: Props) {\n  const [ref, { width: rWidth, height: rHeight }] = useMeasure();\n  const [{ x, y }, set] = useSpring(() => ({\n    x: 50,\n    y: 50,\n    config: { ...config.slow }\n  }));\n\n  // Set the drag hook and define component movement based on gesture data\n  const bind = useDrag(\n    ({ movement: [mx, my], down, xy: [x, y], event }) => {\n      if (down) {\n        document.ontouchmove = function(e) {\n          e.preventDefault();\n        };\n        // console.log(mx, my, scaleX(mx), scaleY(my));\n        set({\n          x: mx,\n          y: my\n        });\n      } else {\n        document.ontouchmove = function() {\n          return true;\n        };\n      }\n    },\n    {\n      initial: () => [x.getValue(), y.getValue()],\n      eventOptions: {},\n      bounds: {\n        left: 0,\n        right: rWidth,\n        bottom: rHeight,\n        top: 0\n      },\n      filterTaps: true\n    }\n  );\n\n  const scaleX = scaleLinear()\n    .domain([0, rWidth])\n    .range([0, 100]);\n\n  const scaleY = scaleLinear()\n    .domain([0, rHeight])\n    .range([0, 100]);\n\n  return (\n    <animated.div\n      ref={ref}\n      {...bind()}\n      css={css`\n        height: 100%;\n        width: 100%;\n        flex: 1 1 100%;\n        background-color: ${fallback || \"transparent\"};\n        background-image: url(${uri});\n        background-repeat: no-repeat;\n        background-size: auto !important;\n      `}\n      style={{\n        touchAction: \"none\",\n        backgroundPosition: interpolate(\n          [x, y],\n          (x, y) => `${100 - scaleX(x)}% ${100 - scaleY(y)}%`\n        )\n      }}\n    />\n  );\n});\n","import * as React from \"react\";\nimport { css } from \"@emotion/core\";\n\nexport function Button(props: React.ButtonHTMLAttributes<HTMLButtonElement>) {\n  return (\n    <button\n      css={theme => css`\n        border: none;\n        background: linear-gradient(45deg, ${theme.dark}, ${theme.dark2});\n        box-shadow: 1px 1px 1px 0 black;\n        padding: ${theme.paddingVertical} ${theme.paddingHorizontal};\n        border-radius: ${theme.radius};\n        color: white;\n      `}\n      {...props}\n    >\n      {props.children}\n    </button>\n  );\n}\n","import * as React from \"react\";\nimport { css } from \"@emotion/core\";\n\nexport function Space() {\n  return (\n    <div\n      css={css`\n        flex: 0 0 10px;\n      `}\n    />\n  );\n}\n","import React from \"react\";\nimport { css } from \"@emotion/core\";\nimport { PanImage } from \"./PanImage\";\nimport { Button } from \"./Button\";\nimport { Space } from \"./Space\";\n\nexport type CardProps = {\n  id: string;\n  uri: string;\n  title: string;\n  authorLink: string;\n  link: string;\n  author: string;\n  authorImage: string;\n  description: string;\n  onCardClicked?: (id: string) => void;\n  fallback?: string;\n};\n\nexport const Card = React.memo(function CardComponent({\n  id,\n  uri,\n  title,\n  authorImage,\n  onCardClicked,\n  fallback,\n  link\n}: CardProps) {\n  return (\n    <div\n      css={theme => css`\n        height: 100%;\n        width: 100%;\n        overflow: hidden;\n        display: flex;\n        flex-direction: column;\n        border-radius: ${theme.radius};\n        border: 1px solid ${theme.dark2};\n      `}\n    >\n      <div style={{ width: \"100%\", flex: 2, background: fallback || \"none\" }}>\n        <PanImage uri={uri} />\n      </div>\n      <div\n        css={theme => css`\n          display: flex;\n          align-items: center;\n          padding: ${theme.paddingHorizontal};\n        `}\n      >\n        <a href={link}>{title}</a>\n        <Space />\n        <Button onClick={() => (void !onCardClicked ? 0 : onCardClicked!(id))}>\n          Expand\n        </Button>\n        <Space />\n        <div\n          css={theme => css`\n            flex: 0 0 35px;\n            width: 35px;\n            height: 35px;\n            align-self: center;\n            border-radius: ${theme.radius};\n            background-image: url(${authorImage});\n            background-size: cover;\n            box-shadow: 0 1px 1px 0 black;\n          `}\n        />\n      </div>\n    </div>\n  );\n});\n","import React from \"react\";\nimport { css } from \"@emotion/core\";\n\ntype Props = {\n  onSearchChanged: (searchValue: string) => void;\n  value: string;\n};\n\nexport function Search({ value, onSearchChanged }: Props) {\n  return (\n    <input\n      placeholder=\"Search\"\n      css={theme => css`\n        border: none;\n        padding: ${theme.paddingVertical} ${theme.paddingHorizontal};\n        border-radius: ${theme.radius};\n        background: ${theme.light};\n        box-shadow: inset 0 0 2px 0 ${theme.dark};\n      `}\n      type=\"text\"\n      value={value}\n      onChange={e => void onSearchChanged(e.target.value)}\n    />\n  );\n}\n","import { createSelector } from \"reselect\";\nimport { Model } from \"./model\";\nimport Fuse, { FuseOptions } from \"fuse.js\";\nimport { Image } from \"./effects\";\n\nexport const selectCurrentSearchValue = createSelector(\n  [(state: Model) => state.currentSearchValue],\n  value => value\n);\n\nexport const selectFocusedCard = createSelector(\n  [(state: Model) => state.images, (state: Model) => state.focusedCardId],\n  (images, focusedCardId) => images.find(image => image.id === focusedCardId)\n);\n\nconst options: FuseOptions<Image> = {\n  shouldSort: true,\n  threshold: 0.6,\n  location: 0,\n  distance: 100,\n  maxPatternLength: 32,\n  minMatchCharLength: 1,\n  includeScore: false,\n  includeMatches: false,\n  keys: [\"description\"]\n};\nexport const selectImages = createSelector(\n  [(state: Model) => state.images, (state: Model) => state.currentSearchValue],\n  (images, searchValue) => {\n    const fuse = new Fuse(images, options);\n    return searchValue ? (fuse.search(searchValue || \"\") as Image[]) : images;\n  }\n);\n","import React from \"react\";\nimport { css } from \"@emotion/core\";\nimport { PanImage } from \"./PanImage\";\nimport { animated, useSpring } from \"react-spring\";\nimport { Portal } from \"react-portal\";\nimport { Space } from \"./Space\";\nimport { Button } from \"./Button\";\n\nexport type CardProps = {\n  id: string;\n  uri: string;\n  title: string;\n  authorLink: string;\n  link: string;\n  author: string;\n  authorImage: string;\n  description: string;\n  onCardClicked?: (id: string) => void;\n  fallback?: string;\n};\n\nexport const FocusedCard = React.memo(function CardComponent({\n  id,\n  uri,\n  title,\n  link,\n  authorLink,\n  author,\n  authorImage,\n  description,\n  onCardClicked,\n  fallback\n}: CardProps) {\n  const { x } = useSpring({\n    from: {\n      x: \"100%\"\n    },\n    x: \"0%\"\n  });\n  return (\n    <Portal>\n      <animated.div\n        css={css`\n          position: fixed;\n          top: 0;\n          right: 0;\n          height: 100%;\n          width: 90%;\n          display: flex;\n          align-items: center;\n          justify-content: center;\n          flex-direction: column;\n          background: rgba(255, 255, 255, 0.5);\n          backdrop-filter: blur(12px);\n          box-shadow: -1px 0 1px 0 rgba(0, 0, 0, 0.5);\n        `}\n        style={{ transform: x.interpolate(x => `translateX(${x})`) }}\n      >\n        <div\n          css={css`\n            height: 100%;\n            width: 100%;\n            overflow: hidden;\n            display: flex;\n            flex-direction: column;\n          `}\n        >\n          <div style={{ width: \"100%\", flex: 3 }}>\n            <PanImage uri={uri} />\n          </div>\n          <div\n            css={theme => css`\n              flex: 1;\n              align-items: flex-start;\n              justify-content: flex-start;\n              flex-direction: column;\n              display: flex;\n              padding: ${theme.paddingVertical} ${theme.paddingHorizontal};\n            `}\n          >\n            <div\n              css={theme => css`\n                flex: 0 0 50px;\n                width: 50px;\n                height: 50px;\n                align-self: center;\n                border-radius: ${theme.radius};\n                background-image: url(${authorImage});\n                background-size: cover;\n                box-shadow: 0 1px 1px 0 black;\n              `}\n            />\n            <Space />\n            <div style={{ flex: 1, overflow: \"scroll\" }}>\n              {description || \"No description.\"}\n            </div>\n            <Space />\n            <span\n              css={css`\n                flex: 0;\n              `}\n            >\n              <a href={link}>{title}</a> by <a href={authorLink}>{author}</a>\n            </span>\n            <Space />\n            <Button\n              onClick={() => (void onCardClicked ? 0 : onCardClicked!(id))}\n            >\n              Close\n            </Button>\n          </div>\n        </div>\n      </animated.div>\n    </Portal>\n  );\n});\n","import { css } from \"@emotion/core\";\nimport { ThemeProvider } from \"emotion-theming\";\nimport \"./index.css\";\nimport * as React from \"react\";\nimport { store, useTDispatch, useTSelector } from \"./store/\";\nimport { Provider } from \"react-redux\";\nimport { FeedList } from \"./components/FeedList\";\nimport { Card } from \"./components/Card\";\nimport { Space } from \"./components/Space\";\nimport { render } from \"react-dom\";\nimport useMeasure from \"react-use-measure\";\nimport { Image } from \"./store/effects\";\n/* eslint-disable @typescript-eslint/no-unused-vars */\nimport { Search } from \"./components/Search\";\nimport {\n  selectCurrentSearchValue,\n  selectFocusedCard,\n  selectImages\n} from \"./store/selectors\";\nimport { Button } from \"./components/Button\";\nimport { useNetworkStatus } from \"react-adaptive-hooks/network\";\nimport { useHardwareConcurrency } from \"react-adaptive-hooks/hardware-concurrency\";\nimport { FocusedCard } from \"./components/FocusedCard\";\n\nconst theme = {\n  radius: \"2px\",\n  dark: \"#313131\",\n  dark2: \"#414141\",\n  light: \"#fff\",\n  light2: \"#eee\",\n  paddingHorizontal: \"20px\",\n  paddingVertical: \"10px\"\n};\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <ThemeProvider theme={theme}>\n        <Main />\n      </ThemeProvider>\n    </Provider>\n  );\n}\n\nfunction Main() {\n  // adaptive values\n  const { effectiveConnectionType } = useNetworkStatus();\n  const { numberOfLogicalProcessors } = useHardwareConcurrency();\n  // redux\n  const dispatch = useTDispatch();\n  const images = useTSelector(selectImages);\n  const focusedCard = useTSelector(selectFocusedCard);\n  const currentSearchValue = useTSelector(selectCurrentSearchValue);\n  const [ref, { width, height }] = useMeasure();\n  const columns = React.useMemo(\n    () =>\n      numberOfLogicalProcessors < 4\n        ? 1\n        : width <= 500\n        ? 1\n        : width <= 768\n        ? 2\n        : 3,\n    [width, numberOfLogicalProcessors]\n  );\n  const renderCard = React.useCallback(\n    (item: Image, mode?: \"focused\" | \"list\") => (\n      <Card\n        id={item.id}\n        authorLink={item.user.links.html}\n        author={item.user.username}\n        description={item.description}\n        title={item.id}\n        fallback={item.color}\n        authorImage={item.user.profile_image.large}\n        link={item.links.html}\n        uri={\n          effectiveConnectionType === \"4g\"\n            ? item.urls.regular\n            : mode === \"focused\"\n            ? item.urls.regular\n            : item.urls.thumb\n        }\n        onCardClicked={cardId =>\n          void dispatch({ type: \"card clicked\", payload: { cardId } })\n        }\n      />\n    ),\n    [dispatch, effectiveConnectionType]\n  );\n  return (\n    <div\n      css={css`\n        padding: 10px;\n        width: 100%;\n        height: 100%;\n        flex: 1;\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n        justify-content: flex-start;\n      `}\n    >\n      <Search\n        value={currentSearchValue || \"\"}\n        onSearchChanged={searchValue =>\n          void dispatch({\n            type: \"search value changed\",\n            payload: { value: searchValue }\n          })\n        }\n      />\n      <Space />\n      <div\n        ref={ref}\n        css={css`\n          flex: 1;\n          height: 100%;\n          width: 100%;\n        `}\n      >\n        {focusedCard && (\n          <FocusedCard\n            id={focusedCard.id}\n            authorLink={focusedCard.user.links.html}\n            author={focusedCard.user.username}\n            description={focusedCard.description}\n            title={focusedCard.id}\n            fallback={focusedCard.color}\n            authorImage={focusedCard.user.profile_image.large}\n            link={focusedCard.links.html}\n            uri={focusedCard.urls.regular}\n            onCardClicked={() =>\n              void dispatch({ type: \"dismiss focused card clicked\" })\n            }\n          />\n        )}\n        <FeedList\n          items={images}\n          onStartReached={() => void dispatch({ type: \"feed start reached\" })}\n          onEndReached={() => void dispatch({ type: \"feed end reached\" })}\n          columns={columns}\n          width={width}\n          height={height}\n          gap={15}\n          itemHeight={height / 2}\n          endOffset={height / 2}\n          renderItem={renderCard}\n        />\n      </div>\n    </div>\n  );\n}\n\nrender(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}