{"version":3,"sources":["store/effects.ts","store/index.ts","store/update.ts","store/model.ts","components/FeedList.tsx","components/Button.tsx","components/Space.tsx","components/Card.tsx","components/Search.tsx","store/selectors.ts","components/PanImage.tsx","components/FocusedCard.tsx","index.tsx"],"names":["rootSaga","fetchFeedSaga","call","all","takeLatest","select","model","page","fetchFeedPaginated","images","put","type","payload","a","fetch","process","then","r","json","data","saga","createSagaMiddleware","store","createStore","focusedCardId","currentSearchValue","message","cardId","value","composeWithDevTools","applyMiddleware","run","useTSelector","useSelector","useTDispatch","useDispatch","rowStaticStyle","display","FeedList","items","onEndReached","columns","height","width","renderItem","onStartReached","endOffset","itemHeight","gap","rows","Math","ceil","length","rowHeight","scrollHeightTotal","style","overflowX","onScroll","scrollOffset","scrollDirection","itemCount","itemSize","index","renders","columnIndex","datum","push","key","gridTemplateColumns","gridGap","paddingBottom","Button","props","css","theme","dark","dark2","paddingVertical","paddingHorizontal","radius","children","Space","Card","React","memo","id","uri","title","authorImage","onCardClicked","fallback","link","light2","href","onClick","Search","onSearchChanged","placeholder","light","onChange","e","target","selectCurrentSearchValue","createSelector","state","selectFocusedCard","find","image","options","shouldSort","threshold","location","distance","maxPatternLength","minMatchCharLength","includeScore","includeMatches","keys","selectImages","searchValue","fuse","Fuse","search","PanImage","useMeasure","polyfill","ResizeObserver","ref","rWidth","rHeight","useSpring","x","y","config","slow","set","bind","useDrag","movement","mx","my","event","preventDefault","initial","getValue","eventOptions","bounds","left","top","right","bottom","filterTaps","scaleX","scaleLinear","domain","range","scaleY","div","touchAction","backgroundPosition","interpolate","FocusedCard","authorLink","author","description","from","transform","flex","overflow","Main","effectiveConnectionType","useNetworkStatus","numberOfLogicalProcessors","useHardwareConcurrency","dispatch","focusedCard","renderCard","item","mode","user","links","html","username","color","profile_image","large","urls","regular","thumb","render","document","getElementById"],"mappings":"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","file":"static/js/main.796e7f62.chunk.js","sourcesContent":["import { takeLatest, all, call, select, put } from \"redux-saga/effects\";\nimport { Message } from \"./message\";\nimport { Model } from \"./model\";\n\nexport function* rootSaga() {\n  yield call(fetchFeedSaga);\n  yield all([takeLatest<Message>(\"feed end reached\", fetchFeedSaga)]);\n}\n\nfunction* fetchFeedSaga() {\n  const page = yield select((model: Model) => model.page);\n  const images: Image[] = yield call(fetchFeedPaginated, page);\n  yield put({\n    type: \"[saga] images fetched\",\n    payload: {\n      images\n    }\n  });\n}\nasync function fetchFeedPaginated(page: number) {\n  const data: Image[] = await fetch(\n    `https://api.unsplash.com/photos/?client_id=${process.env.REACT_APP_UNSPLASH_PUBLIC_KEY}&page=${page}`\n  ).then(r => r.json());\n  return data;\n}\n\nexport type Image = {\n  id: string;\n  created_at: string;\n  updated_at: string;\n  width: number;\n  height: number;\n  color: string;\n  description: string;\n  alt_description: string;\n  urls: {\n    small: string;\n    regular: string;\n    full: string;\n    raw: string;\n    thumb: string;\n  };\n  links: {\n    self: string;\n    html: string;\n  };\n  categories: string[];\n  user: User;\n};\ntype User = {\n  id: string;\n  username: string;\n  name: string;\n  first_name: string;\n  last_name: string;\n  links: {\n    self: string;\n    html: string;\n  };\n  profile_image: {\n    small: string;\n    medium: string;\n    large: string;\n  };\n};\n","import { createStore, applyMiddleware, Dispatch } from \"redux\";\nimport createSagaMiddleware from \"redux-saga\";\nimport { update } from \"./update\";\nimport { TypedUseSelectorHook, useSelector, useDispatch } from \"react-redux\";\nimport { Model } from \"./model\";\nimport { Message } from \"./message\";\nimport { rootSaga } from \"./effects\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\n\nconst saga = createSagaMiddleware();\n\nexport const store = createStore(\n  update,\n  composeWithDevTools(applyMiddleware(saga))\n);\n\nsaga.run(rootSaga);\n\nexport const useTSelector: TypedUseSelectorHook<Model> = useSelector;\nexport const useTDispatch = useDispatch as () => Dispatch<Message>;\n","import { Model, initialModel } from \"./model\";\nimport { Message } from \"./message\";\n\nexport function update(model: Model = initialModel(), message: Message): Model {\n  switch (message.type) {\n    case \"[saga] images fetched\": {\n      return {\n        ...model,\n        images: [...model.images, ...message.payload.images]\n      };\n    }\n    case \"feed end reached\": {\n      return {\n        ...model,\n        page: model.page + 1\n      };\n    }\n    case \"card clicked\": {\n      return {\n        ...model,\n        focusedCardId: message.payload.cardId\n      };\n    }\n    case \"dismiss focused card clicked\": {\n      return {\n        ...model,\n        focusedCardId: null\n      };\n    }\n    case \"search value changed\": {\n      return {\n        ...model,\n        currentSearchValue: message.payload.value\n      };\n    }\n    default: {\n      return model;\n    }\n  }\n}\n","import { Image } from \"./effects\";\n\nexport type Model = {\n  page: number;\n  images: Image[];\n  focusedCardId: string | null;\n  currentSearchValue: string | null;\n};\n\nexport function initialModel(): Model {\n  return {\n    images: [],\n    page: 1,\n    focusedCardId: null,\n    currentSearchValue: null\n  };\n}\n","import * as React from \"react\";\nimport { FixedSizeList } from \"react-window\";\n\nconst rowStaticStyle = {\n  display: \"grid\"\n};\n\ntype Props<T> = {\n  items: T[];\n  onEndReached: () => void;\n  onStartReached: () => void;\n  columns?: number;\n  height: number;\n  width: number;\n  renderItem: (item: T) => React.ReactChild;\n  endOffset?: number;\n  itemHeight?: number;\n  gap?: number;\n};\nexport function FeedList<T>({\n  items,\n  onEndReached,\n  columns = 3,\n  height,\n  width,\n  renderItem,\n  onStartReached,\n  endOffset = 0,\n  itemHeight,\n  gap = 5\n}: Props<T>) {\n  const rows = Math.ceil(items.length / columns);\n  const rowHeight = itemHeight || height;\n  const scrollHeightTotal = rows * rowHeight - (height - (itemHeight || 0));\n  return (\n    <FixedSizeList\n      style={{\n        overflowX: \"hidden\",\n        width,\n        height\n      }}\n      width={width}\n      height={height}\n      onScroll={({ scrollOffset, scrollDirection }) => {\n        if (scrollOffset === 0 && scrollDirection === \"backward\")\n          onStartReached();\n        else if (\n          scrollOffset >= scrollHeightTotal - rowHeight - endOffset &&\n          scrollDirection === \"forward\"\n        )\n          onEndReached();\n      }}\n      itemCount={rows}\n      itemSize={rowHeight}\n    >\n      {({ style, index }) => {\n        const renders: React.ReactChild[] = [];\n        for (let columnIndex = 0; columnIndex < columns; columnIndex++) {\n          const datum = items[index * columns + columnIndex];\n          if (datum) renders.push(renderItem(datum));\n        }\n        return (\n          <div\n            key={index}\n            style={{\n              ...style,\n              ...rowStaticStyle,\n              gridTemplateColumns: `repeat(${columns}, 1fr)`,\n              gridGap: gap,\n              paddingBottom: gap\n            }}\n          >\n            {renders}\n          </div>\n        );\n      }}\n    </FixedSizeList>\n  );\n}\n","import * as React from \"react\";\nimport { css } from \"@emotion/core\";\n\nexport function Button(props: React.ButtonHTMLAttributes<HTMLButtonElement>) {\n  return (\n    <button\n      css={theme => css`\n        border: none;\n        background: linear-gradient(45deg, ${theme.dark}, ${theme.dark2});\n        box-shadow: 1px 1px 1px 0 black;\n        padding: ${theme.paddingVertical} ${theme.paddingHorizontal};\n        border-radius: ${theme.radius};\n        color: white;\n      `}\n      {...props}\n    >\n      {props.children}\n    </button>\n  );\n}\n","import * as React from \"react\";\nimport { css } from \"@emotion/core\";\n\nexport function Space() {\n  return (\n    <div\n      css={css`\n        flex: 0 0 10px;\n      `}\n    />\n  );\n}\n","import React from \"react\";\nimport { css } from \"@emotion/core\";\nimport { Button } from \"./Button\";\nimport { Space } from \"./Space\";\n\nexport type CardProps = {\n  id: string;\n  uri: string;\n  title: string;\n  authorLink: string;\n  link: string;\n  author: string;\n  authorImage: string;\n  onCardClicked?: (id: string) => void;\n  fallback?: string;\n};\n\nexport const Card = React.memo(function CardComponent({\n  id,\n  uri,\n  title,\n  authorImage,\n  onCardClicked,\n  fallback,\n  link\n}: CardProps) {\n  return (\n    <div\n      css={theme => css`\n        height: 100%;\n        width: 100%;\n        overflow: hidden;\n        display: flex;\n        flex-direction: column;\n        border-radius: ${theme.radius};\n        border: 1px solid ${theme.light2};\n      `}\n    >\n      <div\n        css={css`\n          flex: 1;\n          background-color: ${fallback || \"transparent\"};\n          background-image: url(${uri});\n          background-repeat: no-repeat;\n          background-size: cover;\n        `}\n      />\n      <div\n        css={theme => css`\n          display: flex;\n          align-items: center;\n          padding: ${theme.paddingHorizontal};\n        `}\n      >\n        <a href={link}>{title}</a>\n        <Space />\n        <Button onClick={() => (void !onCardClicked ? 0 : onCardClicked!(id))}>\n          Expand\n        </Button>\n        <Space />\n        <div\n          css={theme => css`\n            flex: 0 0 35px;\n            width: 35px;\n            height: 35px;\n            align-self: center;\n            border-radius: 35px;\n            background-image: url(${authorImage});\n            background-size: cover;\n            box-shadow: 0px 0px 1px 0 black;\n          `}\n        />\n      </div>\n    </div>\n  );\n});\n","import React from \"react\";\nimport { css } from \"@emotion/core\";\n\ntype Props = {\n  onSearchChanged: (searchValue: string) => void;\n  value: string;\n};\n\nexport function Search({ value, onSearchChanged }: Props) {\n  return (\n    <input\n      placeholder=\"Search\"\n      css={theme => css`\n        border: none;\n        padding: ${theme.paddingVertical} ${theme.paddingHorizontal};\n        border-radius: ${theme.radius};\n        background: ${theme.light};\n        box-shadow: inset 0 0 2px 0 ${theme.dark};\n      `}\n      type=\"text\"\n      value={value}\n      onChange={e => void onSearchChanged(e.target.value)}\n    />\n  );\n}\n","import { createSelector } from \"reselect\";\nimport { Model } from \"./model\";\nimport Fuse, { FuseOptions } from \"fuse.js\";\nimport { Image } from \"./effects\";\n\nexport const selectCurrentSearchValue = createSelector(\n  [(state: Model) => state.currentSearchValue],\n  value => value\n);\n\nexport const selectFocusedCard = createSelector(\n  [(state: Model) => state.images, (state: Model) => state.focusedCardId],\n  (images, focusedCardId) => images.find(image => image.id === focusedCardId)\n);\n\nconst options: FuseOptions<Image> = {\n  shouldSort: true,\n  threshold: 0.6,\n  location: 0,\n  distance: 100,\n  maxPatternLength: 32,\n  minMatchCharLength: 1,\n  includeScore: false,\n  includeMatches: false,\n  keys: [\"description\"]\n};\nexport const selectImages = createSelector(\n  [(state: Model) => state.images, (state: Model) => state.currentSearchValue],\n  (images, searchValue) => {\n    const fuse = new Fuse(images, options);\n    return searchValue ? (fuse.search(searchValue || \"\") as Image[]) : images;\n  }\n);\n","import React from \"react\";\nimport { css } from \"@emotion/core\";\nimport { animated, useSpring, interpolate, config } from \"react-spring\";\nimport { useDrag } from \"react-use-gesture\";\nimport { scaleLinear } from \"d3-scale\";\nimport useMeasure from \"react-use-measure\";\nimport ResizeObserver from \"resize-observer-polyfill\";\n\ntype Props = {\n  uri: string;\n  fallback?: string;\n};\n\nexport const PanImage = React.memo(function CardComponent({\n  uri,\n  fallback\n}: Props) {\n  const [ref, { width: rWidth, height: rHeight }] = useMeasure({\n    polyfill: ResizeObserver\n  });\n  const [{ x, y }, set] = useSpring(() => ({\n    // start at centre (50%)\n    x: 50,\n    y: 50,\n    config: { ...config.slow }\n  }));\n\n  // Set the drag hook and define component movement based on gesture data\n  const bind = useDrag(\n    ({ movement: [mx, my], event }) => {\n      event?.preventDefault();\n      set({\n        x: mx,\n        y: my\n      });\n    },\n    {\n      initial: () => [x.getValue(), y.getValue()],\n      eventOptions: {},\n      bounds: {\n        left: 0,\n        top: 0,\n        right: rWidth,\n        bottom: rHeight\n      },\n      filterTaps: true\n    }\n  );\n\n  const scaleX = scaleLinear()\n    .domain([0, rWidth])\n    .range([0, 100]);\n\n  const scaleY = scaleLinear()\n    .domain([0, rHeight])\n    .range([0, 100]);\n\n  return (\n    <animated.div\n      ref={ref}\n      {...bind()}\n      css={css`\n        height: 100%;\n        width: 100%;\n        flex: 1 1 100%;\n        background-color: ${fallback || \"transparent\"};\n        background-image: url(${uri});\n        background-repeat: no-repeat;\n        background-size: auto !important;\n      `}\n      style={{\n        touchAction: \"none\",\n        backgroundPosition: interpolate(\n          [x, y],\n          (x, y) => `${100 - scaleX(x)}% ${100 - scaleY(y)}%`\n        )\n      }}\n    />\n  );\n});\n","import React from \"react\";\nimport { css } from \"@emotion/core\";\nimport { PanImage } from \"./PanImage\";\nimport { animated, useSpring } from \"react-spring\";\nimport { Portal } from \"react-portal\";\nimport { Space } from \"./Space\";\nimport { Button } from \"./Button\";\n\nexport type CardProps = {\n  id: string;\n  uri: string;\n  title: string;\n  authorLink: string;\n  link: string;\n  author: string;\n  authorImage: string;\n  description: string;\n  onCardClicked?: (id: string) => void;\n  fallback?: string;\n};\n\nexport const FocusedCard = React.memo(function CardComponent({\n  id,\n  uri,\n  title,\n  link,\n  authorLink,\n  author,\n  authorImage,\n  description,\n  onCardClicked,\n  fallback\n}: CardProps) {\n  const { x } = useSpring({\n    from: {\n      x: \"100%\"\n    },\n    x: \"0%\"\n  });\n  return (\n    <Portal>\n      <animated.div\n        css={css`\n          position: fixed;\n          top: 0;\n          right: 0;\n          height: 100%;\n          width: 90%;\n          display: flex;\n          align-items: center;\n          justify-content: center;\n          flex-direction: column;\n          background: rgba(255, 255, 255, 0.5);\n          backdrop-filter: blur(15px);\n          box-shadow: -1px 0 5px 0 rgba(0, 0, 0, 0.3);\n        `}\n        style={{ transform: x.interpolate(x => `translateX(${x})`) }}\n      >\n        <div\n          css={css`\n            height: 100%;\n            width: 100%;\n            overflow: hidden;\n            display: flex;\n            flex-direction: column;\n          `}\n        >\n          <div style={{ width: \"100%\", flex: 3 }}>\n            <PanImage uri={uri} />\n          </div>\n          <div\n            css={theme => css`\n              flex: 1;\n              align-items: flex-start;\n              justify-content: flex-start;\n              flex-direction: column;\n              display: flex;\n              padding: ${theme.paddingVertical} ${theme.paddingHorizontal};\n            `}\n          >\n            <div\n              css={theme => css`\n                flex: 0 0 50px;\n                width: 50px;\n                height: 50px;\n                align-self: center;\n                border-radius: ${theme.radius};\n                background-image: url(${authorImage});\n                background-size: cover;\n                box-shadow: 0 1px 1px 0 black;\n              `}\n            />\n            <Space />\n            <div style={{ flex: 1, overflow: \"scroll\" }}>\n              {description || \"No description.\"}\n            </div>\n            <Space />\n            <span\n              css={css`\n                flex: 0;\n              `}\n            >\n              <a href={link}>{title}</a> by <a href={authorLink}>{author}</a>\n            </span>\n            <Space />\n            <Button\n              onClick={() => (void onCardClicked ? 0 : onCardClicked!(id))}\n            >\n              Close\n            </Button>\n          </div>\n        </div>\n      </animated.div>\n    </Portal>\n  );\n});\n","import { css } from \"@emotion/core\";\nimport { ThemeProvider } from \"emotion-theming\";\nimport \"./index.css\";\nimport * as React from \"react\";\nimport { store, useTDispatch, useTSelector } from \"./store/\";\nimport { Provider } from \"react-redux\";\nimport { FeedList } from \"./components/FeedList\";\nimport { Card } from \"./components/Card\";\nimport { Space } from \"./components/Space\";\nimport { render } from \"react-dom\";\nimport useMeasure from \"react-use-measure\";\nimport ResizeObserver from \"resize-observer-polyfill\";\nimport { Image } from \"./store/effects\";\nimport { Search } from \"./components/Search\";\nimport {\n  selectCurrentSearchValue,\n  selectFocusedCard,\n  selectImages\n} from \"./store/selectors\";\nimport { useNetworkStatus } from \"react-adaptive-hooks/network\";\nimport { useHardwareConcurrency } from \"react-adaptive-hooks/hardware-concurrency\";\nimport { FocusedCard } from \"./components/FocusedCard\";\n\nconst theme = {\n  radius: \"2px\",\n  dark: \"#313131\",\n  dark2: \"#414141\",\n  light: \"#fff\",\n  light2: \"#bababa\",\n  paddingHorizontal: \"20px\",\n  paddingVertical: \"10px\"\n};\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <ThemeProvider theme={theme}>\n        <Main />\n      </ThemeProvider>\n    </Provider>\n  );\n}\n\nfunction Main() {\n  // adaptive values\n  const { effectiveConnectionType } = useNetworkStatus();\n  const { numberOfLogicalProcessors } = useHardwareConcurrency();\n  // redux\n  const dispatch = useTDispatch();\n  const images = useTSelector(selectImages);\n  const focusedCard = useTSelector(selectFocusedCard);\n  const currentSearchValue = useTSelector(selectCurrentSearchValue);\n  const [ref, { width, height }] = useMeasure({\n    polyfill: ResizeObserver\n  });\n  const columns = React.useMemo(\n    () =>\n      numberOfLogicalProcessors < 4\n        ? 1\n        : width <= 500\n        ? 1\n        : width <= 768\n        ? 2\n        : 3,\n    [width, numberOfLogicalProcessors]\n  );\n  const renderCard = React.useCallback(\n    (item: Image, mode?: \"focused\" | \"list\") => (\n      <Card\n        id={item.id}\n        authorLink={item.user.links.html}\n        author={item.user.username}\n        title={item.id}\n        fallback={item.color}\n        authorImage={item.user.profile_image.large}\n        link={item.links.html}\n        uri={\n          effectiveConnectionType === \"4g\"\n            ? item.urls.regular\n            : mode === \"focused\"\n            ? item.urls.regular\n            : item.urls.thumb\n        }\n        onCardClicked={cardId =>\n          void dispatch({ type: \"card clicked\", payload: { cardId } })\n        }\n      />\n    ),\n    [dispatch, effectiveConnectionType]\n  );\n  return (\n    <div\n      css={css`\n        padding: 10px;\n        width: 100%;\n        height: 100%;\n        flex: 1;\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n        justify-content: flex-start;\n      `}\n    >\n      <Search\n        value={currentSearchValue || \"\"}\n        onSearchChanged={searchValue =>\n          void dispatch({\n            type: \"search value changed\",\n            payload: { value: searchValue }\n          })\n        }\n      />\n      <Space />\n      <div\n        ref={ref}\n        css={css`\n          flex: 1;\n          height: 100%;\n          width: 100%;\n        `}\n      >\n        {focusedCard && (\n          <FocusedCard\n            id={focusedCard.id}\n            authorLink={focusedCard.user.links.html}\n            author={focusedCard.user.username}\n            description={focusedCard.description}\n            title={focusedCard.id}\n            fallback={focusedCard.color}\n            authorImage={focusedCard.user.profile_image.large}\n            link={focusedCard.links.html}\n            uri={focusedCard.urls.regular}\n            onCardClicked={() =>\n              void dispatch({ type: \"dismiss focused card clicked\" })\n            }\n          />\n        )}\n        <FeedList\n          items={images}\n          onStartReached={() => void dispatch({ type: \"feed start reached\" })}\n          onEndReached={() => void dispatch({ type: \"feed end reached\" })}\n          columns={columns}\n          width={width}\n          height={height}\n          gap={15}\n          itemHeight={height / 2}\n          endOffset={height / 2}\n          renderItem={renderCard}\n        />\n      </div>\n    </div>\n  );\n}\n\nrender(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}