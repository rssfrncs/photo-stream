{"version":3,"sources":["store/effects.ts","store/index.ts","store/update.ts","store/model.ts","components/FeedList.tsx","components/PanImage.tsx","components/Card.tsx","components/Space.tsx","components/Search.tsx","store/selectors.ts","components/Button.tsx","index.tsx"],"names":["rootSaga","fetchFeedSaga","call","all","takeLatest","select","model","page","fetchFeedPaginated","images","put","type","payload","a","fetch","process","then","r","json","data","saga","createSagaMiddleware","store","createStore","focusedCardId","currentSearchValue","message","cardId","value","composeWithDevTools","applyMiddleware","run","useTSelector","useSelector","useTDispatch","useDispatch","rowStaticStyle","display","FeedList","items","onEndReached","columns","height","width","renderItem","onStartReached","endOffset","itemHeight","gap","rows","Math","ceil","length","rowHeight","scrollHeightTotal","style","overflowX","onScroll","scrollOffset","scrollDirection","itemCount","itemSize","index","renders","columnIndex","datum","push","key","gridTemplateColumns","gridGap","paddingBottom","PanImage","React","memo","uri","fallback","range","rWidth","rHeight","useSpring","x","y","config","clamp","set","bind","useDrag","movement","mx","my","xy","max","min","initial","getValue","scaleX","scaleLinear","domain","scaleY","div","css","backgroundPosition","interpolate","Card","id","title","link","authorLink","author","authorImage","description","imgWidth","onCardClicked","imgHeight","useMeasure","ref","theme","radius","dark2","paddingVertical","paddingHorizontal","flex","overflow","href","Space","Search","onSearchChanged","placeholder","light","dark","onChange","e","target","selectCurrentSearchValue","createSelector","state","selectFocusedCard","find","image","options","shouldSort","threshold","location","distance","maxPatternLength","minMatchCharLength","includeScore","includeMatches","keys","selectImages","searchValue","fuse","Fuse","search","Button","props","children","light2","Main","effectiveConnectionType","useNetworkStatus","numberOfLogicalProcessors","useHardwareConcurrency","dispatch","focusedCard","renderCard","item","mode","user","links","html","username","color","profile_image","large","urls","raw","regular","thumb","onClick","render","document","getElementById"],"mappings":"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","file":"static/js/main.60af4e6a.chunk.js","sourcesContent":["import { takeLatest, all, call, select, put } from \"redux-saga/effects\";\nimport { Message } from \"./message\";\nimport { Model } from \"./model\";\n\nexport function* rootSaga() {\n  yield call(fetchFeedSaga);\n  yield all([takeLatest<Message>(\"feed end reached\", fetchFeedSaga)]);\n}\n\nfunction* fetchFeedSaga() {\n  const page = yield select((model: Model) => model.page);\n  const images: Image[] = yield call(fetchFeedPaginated, page);\n  yield put({\n    type: \"[saga] images fetched\",\n    payload: {\n      images\n    }\n  });\n}\nasync function fetchFeedPaginated(page: number) {\n  const data: Image[] = await fetch(\n    `https://api.unsplash.com/photos/?client_id=${process.env.REACT_APP_UNSPLASH_PUBLIC_KEY}&page=${page}`\n  ).then(r => r.json());\n  return data;\n}\n\nexport type Image = {\n  id: string;\n  created_at: string;\n  updated_at: string;\n  width: number;\n  height: number;\n  color: string;\n  description: string;\n  alt_description: string;\n  urls: {\n    small: string;\n    regular: string;\n    raw: string;\n    thumb: string;\n  };\n  links: {\n    self: string;\n    html: string;\n  };\n  categories: string[];\n  user: User;\n};\ntype User = {\n  id: string;\n  username: string;\n  name: string;\n  first_name: string;\n  last_name: string;\n  links: {\n    self: string;\n    html: string;\n  };\n  profile_image: {\n    small: string;\n    medium: string;\n    large: string;\n  };\n};\n","import { createStore, applyMiddleware, Dispatch } from \"redux\";\nimport createSagaMiddleware from \"redux-saga\";\nimport { update } from \"./update\";\nimport { TypedUseSelectorHook, useSelector, useDispatch } from \"react-redux\";\nimport { Model } from \"./model\";\nimport { Message } from \"./message\";\nimport { rootSaga } from \"./effects\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\n\nconst saga = createSagaMiddleware();\n\nexport const store = createStore(\n  update,\n  composeWithDevTools(applyMiddleware(saga))\n);\n\nsaga.run(rootSaga);\n\nexport const useTSelector: TypedUseSelectorHook<Model> = useSelector;\nexport const useTDispatch = useDispatch as () => Dispatch<Message>;\n","import { Model, initialModel } from \"./model\";\nimport { Message } from \"./message\";\n\nexport function update(model: Model = initialModel(), message: Message): Model {\n  switch (message.type) {\n    case \"[saga] images fetched\": {\n      return {\n        ...model,\n        images: [...model.images, ...message.payload.images]\n      };\n    }\n    case \"feed end reached\": {\n      return {\n        ...model,\n        page: model.page + 1\n      };\n    }\n    case \"card clicked\": {\n      return {\n        ...model,\n        focusedCardId: message.payload.cardId\n      };\n    }\n    case \"dismiss focused card clicked\": {\n      return {\n        ...model,\n        focusedCardId: null\n      };\n    }\n    case \"search value changed\": {\n      return {\n        ...model,\n        currentSearchValue: message.payload.value\n      };\n    }\n    default: {\n      return model;\n    }\n  }\n}\n","import { Image } from \"./effects\";\n\nexport type Model = {\n  page: number;\n  images: Image[];\n  focusedCardId: string | null;\n  currentSearchValue: string | null;\n};\n\nexport function initialModel(): Model {\n  return {\n    images: [],\n    page: 1,\n    focusedCardId: null,\n    currentSearchValue: null\n  };\n}\n","import * as React from \"react\";\nimport { FixedSizeList } from \"react-window\";\n\nconst rowStaticStyle = {\n  display: \"grid\"\n};\n\ntype Props<T> = {\n  items: T[];\n  onEndReached: () => void;\n  onStartReached: () => void;\n  columns?: number;\n  height: number;\n  width: number;\n  renderItem: (item: T) => React.ReactChild;\n  endOffset?: number;\n  itemHeight?: number;\n  gap?: number;\n};\nexport function FeedList<T>({\n  items,\n  onEndReached,\n  columns = 3,\n  height,\n  width,\n  renderItem,\n  onStartReached,\n  endOffset = 0,\n  itemHeight,\n  gap = 5\n}: Props<T>) {\n  const rows = Math.ceil(items.length / columns);\n  const rowHeight = itemHeight || height;\n  const scrollHeightTotal = rows * rowHeight - (height - (itemHeight || 0));\n  return (\n    <FixedSizeList\n      style={{\n        overflowX: \"hidden\",\n        width,\n        height\n      }}\n      width={width}\n      height={height}\n      onScroll={({ scrollOffset, scrollDirection }) => {\n        if (scrollOffset === 0 && scrollDirection === \"backward\")\n          onStartReached();\n        else if (\n          scrollOffset >= scrollHeightTotal - rowHeight - endOffset &&\n          scrollDirection === \"forward\"\n        )\n          onEndReached();\n      }}\n      itemCount={rows}\n      itemSize={rowHeight}\n    >\n      {({ style, index }) => {\n        const renders: React.ReactChild[] = [];\n        for (let columnIndex = 0; columnIndex < columns; columnIndex++) {\n          const datum = items[index * columns + columnIndex];\n          if (datum) renders.push(renderItem(datum));\n        }\n        return (\n          <div\n            key={index}\n            style={{\n              ...style,\n              ...rowStaticStyle,\n              gridTemplateColumns: `repeat(${columns}, 1fr)`,\n              gridGap: gap,\n              paddingBottom: gap\n            }}\n          >\n            {renders}\n          </div>\n        );\n      }}\n    </FixedSizeList>\n  );\n}\n","import React from \"react\";\nimport { css } from \"@emotion/core\";\nimport { animated, useSpring, interpolate } from \"react-spring\";\nimport { useDrag } from \"react-use-gesture\";\nimport { scaleLinear } from \"d3-scale\";\n\ntype Props = {\n  uri: string;\n  width: number;\n  height: number;\n  range: [number, number];\n  fallback?: string;\n};\n\nexport const PanImage = React.memo(function CardComponent({\n  uri,\n  fallback,\n  width,\n  height,\n  range: [rWidth, rHeight]\n}: Props) {\n  const [{ x, y }, set] = useSpring(() => ({\n    x: 0,\n    y: 0,\n    config: { clamp: true }\n  }));\n  // Set the drag hook and define component movement based on gesture data\n  const bind = useDrag(\n    ({ movement: [mx, my], xy: [x, y] }) => {\n      set({\n        x: Math.max(0, Math.min(mx, rWidth / 2)),\n        y: Math.max(0, Math.min(my, rHeight / 2))\n      });\n    },\n    {\n      initial: () => [x.getValue(), y.getValue()]\n    }\n  );\n\n  const scaleX = scaleLinear()\n    .domain([0, rWidth])\n    .range([0, width]);\n\n  const scaleY = scaleLinear()\n    .domain([0, rHeight])\n    .range([0, height]);\n\n  return (\n    <animated.div\n      {...bind()}\n      css={css`\n        flex: 0 0 auto;\n        width: ${rWidth}px;\n        height: ${rHeight}px;\n        background-color: ${fallback || \"transparent\"};\n        background-image: url(${uri});\n        background-repeat: no-repeat;\n      `}\n      style={{\n        backgroundPosition: interpolate(\n          [x, y],\n          (x, y) => `-${scaleX(x)}px -${scaleY(y)}px`\n        )\n      }}\n    />\n  );\n});\n","import React from \"react\";\nimport { css } from \"@emotion/core\";\nimport { PanImage } from \"./PanImage\";\nimport useMeasure from \"react-use-measure\";\n\nexport type CardProps = {\n  id: string;\n  uri: string;\n  title: string;\n  authorLink: string;\n  link: string;\n  author: string;\n  authorImage: string;\n  description: string;\n  onCardClicked?: (id: string) => void;\n  fallback?: string;\n  imgWidth: number;\n  imgHeight: number;\n};\n\nexport const Card = React.memo(function CardComponent({\n  id,\n  uri,\n  title,\n  link,\n  authorLink,\n  author,\n  authorImage,\n  description,\n  onCardClicked,\n  fallback,\n  imgWidth,\n  imgHeight\n}: CardProps) {\n  const [ref, { width }] = useMeasure();\n  return (\n    <div\n      ref={ref}\n      css={theme => css`\n        height: 100%;\n        width: 100%;\n        overflow: hidden;\n        display: flex;\n        flex-direction: column;\n        border-radius: ${theme.radius};\n        box-shadow: 0px 1px 1px 0 ${theme.dark2};\n      `}\n    >\n      <PanImage\n        width={imgWidth}\n        height={imgHeight}\n        range={[width, 150]}\n        uri={uri}\n      />\n      <div\n        css={theme => css`\n          flex: 1;\n          align-items: flex-start;\n          justify-content: flex-start;\n          flex-direction: column;\n          display: flex;\n          padding: ${theme.paddingVertical} ${theme.paddingHorizontal};\n        `}\n      >\n        <div\n          css={theme => css`\n            flex: 0 0 50px;\n            width: 50px;\n            height: 50px;\n            align-self: center;\n            border-radius: ${theme.radius};\n            background-image: url(${authorImage});\n            background-size: cover;\n            box-shadow: 0 1px 1px 0 black;\n          `}\n        />\n        <div\n          css={css`\n            flex: 0 0 10px;\n          `}\n        />\n        <div style={{ flex: 1, overflow: \"scroll\" }}>{description}</div>\n        <div\n          css={css`\n            flex: 0 0 10px;\n          `}\n        />\n        <span\n          css={css`\n            flex: 0;\n          `}\n        >\n          <a href={link}>{title}</a> by <a href={authorLink}>{author}</a>\n        </span>\n        <div\n          css={css`\n            flex: 0 0 10px;\n          `}\n        />\n      </div>\n    </div>\n  );\n});\n","import * as React from \"react\";\nimport { css } from \"@emotion/core\";\n\nexport function Space() {\n  return (\n    <div\n      css={css`\n        flex: 0 0 10px;\n      `}\n    />\n  );\n}\n","import React from \"react\";\nimport { css } from \"@emotion/core\";\n\ntype Props = {\n  onSearchChanged: (searchValue: string) => void;\n  value: string;\n};\n\nexport function Search({ value, onSearchChanged }: Props) {\n  return (\n    <input\n      placeholder=\"Search\"\n      css={theme => css`\n        border: none;\n        padding: ${theme.paddingVertical} ${theme.paddingHorizontal};\n        border-radius: ${theme.radius};\n        background: ${theme.light};\n        box-shadow: inset 0 0 2px 0 ${theme.dark};\n      `}\n      type=\"text\"\n      value={value}\n      onChange={e => void onSearchChanged(e.target.value)}\n    />\n  );\n}\n","import { createSelector } from \"reselect\";\nimport { Model } from \"./model\";\nimport Fuse, { FuseOptions } from \"fuse.js\";\nimport { Image } from \"./effects\";\n\nexport const selectCurrentSearchValue = createSelector(\n  [(state: Model) => state.currentSearchValue],\n  value => value\n);\n\nexport const selectFocusedCard = createSelector(\n  [(state: Model) => state.images, (state: Model) => state.focusedCardId],\n  (images, focusedCardId) => images.find(image => image.id === focusedCardId)\n);\n\nconst options: FuseOptions<Image> = {\n  shouldSort: true,\n  threshold: 0.6,\n  location: 0,\n  distance: 100,\n  maxPatternLength: 32,\n  minMatchCharLength: 1,\n  includeScore: false,\n  includeMatches: false,\n  keys: [\"description\"]\n};\nexport const selectImages = createSelector(\n  [(state: Model) => state.images, (state: Model) => state.currentSearchValue],\n  (images, searchValue) => {\n    const fuse = new Fuse(images, options);\n    return searchValue ? (fuse.search(searchValue || \"\") as Image[]) : images;\n  }\n);\n","import * as React from \"react\";\nimport { css } from \"@emotion/core\";\n\nexport function Button(props: React.ButtonHTMLAttributes<HTMLButtonElement>) {\n  return (\n    <button\n      css={theme => css`\n        border: none;\n        background: linear-gradient(45deg, ${theme.dark}, ${theme.dark2});\n        box-shadow: 1px 1px 1px 0 black;\n        padding: ${theme.paddingVertical} ${theme.paddingHorizontal};\n        border-radius: ${theme.radius};\n        color: white;\n      `}\n      {...props}\n    >\n      {props.children}\n    </button>\n  );\n}\n","import { css } from \"@emotion/core\";\nimport { ThemeProvider } from \"emotion-theming\";\nimport \"./index.css\";\nimport * as React from \"react\";\nimport { store, useTDispatch, useTSelector } from \"./store/\";\nimport { Provider } from \"react-redux\";\nimport { FeedList } from \"./components/FeedList\";\nimport { Card } from \"./components/Card\";\nimport { Space } from \"./components/Space\";\nimport { render } from \"react-dom\";\nimport useMeasure from \"react-use-measure\";\nimport { Image } from \"./store/effects\";\n/* eslint-disable @typescript-eslint/no-unused-vars */\nimport { Portal } from \"react-portal\";\nimport { Search } from \"./components/Search\";\nimport {\n  selectCurrentSearchValue,\n  selectFocusedCard,\n  selectImages\n} from \"./store/selectors\";\nimport { Button } from \"./components/Button\";\nimport { useNetworkStatus } from \"react-adaptive-hooks/network\";\nimport { useHardwareConcurrency } from \"react-adaptive-hooks/hardware-concurrency\";\n\nconst theme = {\n  radius: \"2px\",\n  dark: \"#313131\",\n  dark2: \"#414141\",\n  light: \"#fff\",\n  light2: \"#eee\",\n  paddingHorizontal: \"20px\",\n  paddingVertical: \"10px\"\n};\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <ThemeProvider theme={theme}>\n        <Main />\n      </ThemeProvider>\n    </Provider>\n  );\n}\n\nfunction Main() {\n  // adaptive values\n  const { effectiveConnectionType } = useNetworkStatus();\n  const { numberOfLogicalProcessors } = useHardwareConcurrency();\n  // redux\n  const dispatch = useTDispatch();\n  const images = useTSelector(selectImages);\n  const focusedCard = useTSelector(selectFocusedCard);\n  const currentSearchValue = useTSelector(selectCurrentSearchValue);\n  const [ref, { width, height }] = useMeasure();\n  const columns = React.useMemo(\n    () =>\n      numberOfLogicalProcessors < 4\n        ? 1\n        : width <= 500\n        ? 1\n        : width <= 768\n        ? 2\n        : 3,\n    [width, numberOfLogicalProcessors]\n  );\n  const renderCard = React.useCallback(\n    (item: Image, mode?: \"focused\" | \"list\") => (\n      <Card\n        id={item.id}\n        authorLink={item.user.links.html}\n        author={item.user.username}\n        description={item.description}\n        title={item.id}\n        fallback={item.color}\n        authorImage={item.user.profile_image.large}\n        link={item.links.html}\n        uri={\n          effectiveConnectionType === \"4g\"\n            ? mode === \"focused\"\n              ? item.urls.raw\n              : item.urls.regular\n            : mode === \"focused\"\n            ? item.urls.regular\n            : item.urls.thumb\n        }\n        onCardClicked={cardId =>\n          void dispatch({ type: \"card clicked\", payload: { cardId } })\n        }\n        imgWidth={1080}\n        imgHeight={500}\n      />\n    ),\n    [dispatch, effectiveConnectionType]\n  );\n  return (\n    <div\n      css={css`\n        padding: 10px;\n        width: 100%;\n        height: 100%;\n        flex: 1;\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n        justify-content: flex-start;\n      `}\n    >\n      <Search\n        value={currentSearchValue || \"\"}\n        onSearchChanged={searchValue =>\n          void dispatch({\n            type: \"search value changed\",\n            payload: { value: searchValue }\n          })\n        }\n      />\n      <Space />\n      <div\n        ref={ref}\n        css={css`\n          flex: 1;\n          height: 100%;\n          width: 100%;\n        `}\n      >\n        {focusedCard && (\n          <Portal>\n            <div\n              css={css`\n                position: fixed;\n                top: 0;\n                right: 0;\n                height: 100%;\n                width: 90%;\n                display: flex;\n                align-items: center;\n                justify-content: center;\n                flex-direction: column;\n                background: rgba(255, 255, 255, 0.5);\n                backdrop-filter: blur(12px);\n                box-shadow: -1px 0 1px 0 rgba(0, 0, 0, 0.5);\n              `}\n              onClick={() =>\n                void dispatch({ type: \"dismiss focused card clicked\" })\n              }\n            >\n              <Space />\n              <Button\n                onClick={() =>\n                  void dispatch({ type: \"dismiss focused card clicked\" })\n                }\n              >\n                Close\n              </Button>\n              <Space />\n              {renderCard(focusedCard, \"focused\")}\n            </div>\n          </Portal>\n        )}\n        <FeedList\n          items={images}\n          onStartReached={() => void dispatch({ type: \"feed start reached\" })}\n          onEndReached={() => void dispatch({ type: \"feed end reached\" })}\n          columns={columns}\n          width={width}\n          height={height}\n          gap={15}\n          itemHeight={height / 2}\n          endOffset={height / 2}\n          renderItem={renderCard}\n        />\n      </div>\n    </div>\n  );\n}\n\nrender(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}