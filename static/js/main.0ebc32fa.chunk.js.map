{"version":3,"sources":["store/effects.ts","store/index.ts","store/update.ts","store/model.ts","components/FeedList.tsx","components/Card.tsx","index.tsx"],"names":["rootSaga","fetchFeedSaga","call","all","takeLatest","select","model","page","fetchFeedPaginated","images","put","type","payload","a","fetch","process","then","r","json","data","saga","createSagaMiddleware","store","createStore","focusedCardId","message","cardId","composeWithDevTools","applyMiddleware","run","useTSelector","useSelector","useTDispatch","useDispatch","rowStaticStyle","display","FeedList","items","onEndReached","columns","height","width","renderItem","onStartReached","endOffset","itemHeight","gap","rows","Math","ceil","length","rowHeight","scrollHeightTotal","style","overflowX","onScroll","scrollOffset","scrollDirection","itemCount","itemSize","index","renders","columnIndex","datum","push","gridTemplateColumns","gridGap","paddingBottom","Card","React","memo","id","uri","title","link","authorLink","author","authorImage","description","onCardClicked","fallback","css","onClick","flex","overflow","href","Main","dispatch","state","focusedCard","find","image","useMeasure","ref","renderCard","item","user","links","html","username","color","profile_image","large","urls","regular","render","document","getElementById"],"mappings":"kTAIiBA,G,WAKPC,GALH,SAAUD,IAAV,iEACL,OADK,SACCE,YAAKD,GADN,OAEL,OAFK,SAECE,YAAI,CAACC,YAAoB,mBAAoBH,KAF9C,uCAKP,SAAUA,IAAV,yEACe,OADf,SACqBI,aAAO,SAACC,GAAD,OAAkBA,EAAMC,QADpD,OAE0B,OADlBA,EADR,gBAEgCL,YAAKM,EAAoBD,GAFzD,OAGE,OADME,EAFR,gBAGQC,YAAI,CACRC,KAAM,wBACNC,QAAS,CACPH,YANN,uC,SAUeD,E,8EAAf,WAAkCD,GAAlC,eAAAM,EAAA,sEAC8BC,MAAM,8CAAD,OACeC,mEADf,iBACiER,IAChGS,MAAK,SAAAC,GAAC,OAAIA,EAAEC,UAHhB,cACQC,EADR,yBAISA,GAJT,4C,kCCVMC,EAAOC,cAEAC,EAAQC,uBCRd,WAAyE,IAAzDjB,EAAwD,uDCMtE,CACLG,OAAQ,GACRF,KAAM,EACNiB,cAAe,MDTmCC,EAAyB,uCAC7E,OAAQA,EAAQd,MACd,IAAK,wBACH,OAAO,eACFL,EADL,CAEEG,OAAO,GAAD,mBAAMH,EAAMG,QAAZ,YAAuBgB,EAAQb,QAAQH,WAGjD,IAAK,mBACH,OAAO,eACFH,EADL,CAEEC,KAAMD,EAAMC,KAAO,IAGvB,IAAK,eACH,OAAO,eACFD,EADL,CAEEkB,cAAeC,EAAQb,QAAQc,SAGnC,IAAK,+BACH,OAAO,eACFpB,EADL,CAEEkB,cAAe,OAGnB,QACE,OAAOlB,KDjBXqB,8BAAoBC,0BAAgBR,KAGtCA,EAAKS,IAAI7B,GAEF,IAAM8B,EAA4CC,IAC5CC,EAAeC,I,QGhBtBC,EAAiB,CACrBC,QAAS,QAeJ,SAASC,EAAT,GAWO,IAVZC,EAUW,EAVXA,MACAC,EASW,EATXA,aASW,IARXC,eAQW,MARD,EAQC,EAPXC,EAOW,EAPXA,OACAC,EAMW,EANXA,MACAC,EAKW,EALXA,WACAC,EAIW,EAJXA,eAIW,IAHXC,iBAGW,MAHC,EAGD,EAFXC,EAEW,EAFXA,WAEW,IADXC,WACW,MADL,EACK,EACLC,EAAOC,KAAKC,KAAKZ,EAAMa,OAASX,GAChCY,EAAYN,GAAcL,EAC1BY,EAAoBL,EAAOI,GAAaX,GAAUK,GAAc,IACtE,OACE,YAAC,IAAD,CACEQ,MAAO,CACLC,UAAW,SACXb,QACAD,UAEFC,MAAOA,EACPD,OAAQA,EACRe,SAAU,YAAwC,IAArCC,EAAoC,EAApCA,aAAcC,EAAsB,EAAtBA,gBACJ,IAAjBD,GAA0C,aAApBC,EACxBd,IAEAa,GAAgBJ,EAAoBD,EAAYP,GAC5B,YAApBa,GAEAnB,KAEJoB,UAAWX,EACXY,SAAUR,IAET,YAEC,IAFsB,IAApBE,EAAmB,EAAnBA,MAAOO,EAAY,EAAZA,MACHC,EAA8B,GAC3BC,EAAc,EAAGA,EAAcvB,EAASuB,IAAe,CAC9D,IAAMC,EAAQ1B,EAAMuB,EAAQrB,EAAUuB,GAClCC,GAAOF,EAAQG,KAAKtB,EAAWqB,IAErC,OACE,mBACEV,MAAK,eACAA,EADA,GAEAnB,EAFA,CAGH+B,oBAAoB,UAAD,OAAY1B,EAAZ,UACnB2B,QAASpB,EACTqB,cAAerB,KAGhBe,M,0dCvDAO,EAAOC,IAAMC,MAAK,YAWhB,IAVbC,EAUY,EAVZA,GACAC,EASY,EATZA,IACAC,EAQY,EARZA,MACAC,EAOY,EAPZA,KACAC,EAMY,EANZA,WACAC,EAKY,EALZA,OACAC,EAIY,EAJZA,YACAC,EAGY,EAHZA,YACAC,EAEY,EAFZA,cACAC,EACY,EADZA,SAEA,OACE,mBACEC,IAAG,GAUH,mBACEC,QAAS,WACHH,GAAeA,EAAcR,IAEnCU,IAAKA,YAAF,wEAKmBD,GAAY,cAL/B,yBAMuBR,EANvB,gHAaL,mBACES,IAAG,GASH,mBACEA,IAAKA,YAAF,kGAMuBJ,EANvB,2EAWL,mBACEI,IAAG,IAIL,mBAAK5B,MAAO,CAAE8B,KAAM,EAAGC,SAAU,WAAaN,GAC9C,mBACEG,IAAG,IAIL,oBACEA,IAAG,GAIH,iBAAGI,KAAMX,GAAOD,GALlB,OAKgC,iBAAGY,KAAMV,GAAaC,IAEtD,mBACEK,IAAG,S,ifC5Eb,SAASK,IACP,IAAMC,EAAWvD,IACXvB,EAASqB,GAAa,SAAA0D,GAAK,OAAIA,EAAM/E,UACrCgF,EAAc3D,GAAa,SAAA0D,GAAK,OACpCA,EAAM/E,OAAOiF,MAAK,SAAAC,GAAK,OAAIA,EAAMpB,KAAOiB,EAAMhE,oBAJlC,EAMmBoE,cANnB,mBAMPC,EANO,YAMApD,EANA,EAMAA,MAAOD,EANP,EAMOA,OACfD,EAAU8B,WACd,kBAAO5B,GAAS,IAAM,EAAIA,GAAS,IAAM,EAAI,IAC7C,CAACA,IAEGqD,EAAazB,eACjB,SAAC0B,GAAD,OACE,YAAC3B,EAAD,CACEG,GAAIwB,EAAKxB,GACTI,WAAYoB,EAAKC,KAAKC,MAAMC,KAC5BtB,OAAQmB,EAAKC,KAAKG,SAClBrB,YAAaiB,EAAKjB,YAClBL,MAAOsB,EAAKxB,GACZS,SAAUe,EAAKK,MACfvB,YAAakB,EAAKC,KAAKK,cAAcC,MACrC5B,KAAMqB,EAAKE,MAAMC,KACjB1B,IAAKuB,EAAKQ,KAAKC,QACfzB,cAAe,SAAArD,GACR6D,EAAS,CAAE5E,KAAM,eAAgBC,QAAS,CAAEc,iBAIvD,CAAC6D,IAEH,OACE,mBACEN,IAAG,GAOH,mBACEY,IAAKA,EACLZ,IAAG,GAMFQ,GACC,YAAC,IAAD,KACE,mBACER,IAAG,EAcHC,QAAS,WACFK,EAAS,CAAE5E,KAAM,mCAGxB,sBACEsE,IAAG,EAKHC,QAAS,WACFK,EAAS,CAAE5E,KAAM,mCAP1B,SAYCmF,EAAWL,KAIlB,YAACrD,EAAD,CACEC,MAAO5B,EACPkC,eAAgB,WAAW4C,EAAS,CAAE5E,KAAM,wBAC5C2B,aAAc,WAAWiD,EAAS,CAAE5E,KAAM,sBAC1C4B,QAASA,EACTE,MAAOA,EACPD,OAAQA,EACRM,IAAK,GACLD,WAAYL,EAAS,EACrBI,UAAWJ,EAAS,EACpBE,WAAYoD,MAOtBW,iBAAO,aA7GP,WACE,OACE,YAAC,IAAD,CAAUnF,MAAOA,GACf,YAACgE,EAAD,SA0GC,MAASoB,SAASC,eAAe,W","file":"static/js/main.0ebc32fa.chunk.js","sourcesContent":["import { takeLatest, all, call, select, put } from \"redux-saga/effects\";\nimport { Message } from \"./message\";\nimport { Model } from \"./model\";\n\nexport function* rootSaga() {\n  yield call(fetchFeedSaga);\n  yield all([takeLatest<Message>(\"feed end reached\", fetchFeedSaga)]);\n}\n\nfunction* fetchFeedSaga() {\n  const page = yield select((model: Model) => model.page);\n  const images: Image[] = yield call(fetchFeedPaginated, page);\n  yield put({\n    type: \"[saga] images fetched\",\n    payload: {\n      images\n    }\n  });\n}\nasync function fetchFeedPaginated(page: number) {\n  const data: Image[] = await fetch(\n    `https://api.unsplash.com/photos/?client_id=${process.env.REACT_APP_UNSPLASH_PUBLIC_KEY}&page=${page}`\n  ).then(r => r.json());\n  return data;\n}\n\nexport type Image = {\n  id: string;\n  created_at: string;\n  updated_at: string;\n  width: number;\n  height: number;\n  color: string;\n  description: string;\n  alt_description: string;\n  urls: {\n    small: string;\n    regular: string;\n    large: string;\n  };\n  links: {\n    self: string;\n    html: string;\n  };\n  categories: string[];\n  user: User;\n};\ntype User = {\n  id: string;\n  username: string;\n  name: string;\n  first_name: string;\n  last_name: string;\n  links: {\n    self: string;\n    html: string;\n  };\n  profile_image: {\n    small: string;\n    medium: string;\n    large: string;\n  };\n};\n","import { createStore, applyMiddleware, Dispatch } from \"redux\";\nimport createSagaMiddleware from \"redux-saga\";\nimport { update } from \"./update\";\nimport { TypedUseSelectorHook, useSelector, useDispatch } from \"react-redux\";\nimport { Model } from \"./model\";\nimport { Message } from \"./message\";\nimport { rootSaga } from \"./effects\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\n\nconst saga = createSagaMiddleware();\n\nexport const store = createStore(\n  update,\n  composeWithDevTools(applyMiddleware(saga))\n);\n\nsaga.run(rootSaga);\n\nexport const useTSelector: TypedUseSelectorHook<Model> = useSelector;\nexport const useTDispatch = useDispatch as () => Dispatch<Message>;\n","import { Model, initialModel } from \"./model\";\nimport { Message } from \"./message\";\n\nexport function update(model: Model = initialModel(), message: Message): Model {\n  switch (message.type) {\n    case \"[saga] images fetched\": {\n      return {\n        ...model,\n        images: [...model.images, ...message.payload.images]\n      };\n    }\n    case \"feed end reached\": {\n      return {\n        ...model,\n        page: model.page + 1\n      };\n    }\n    case \"card clicked\": {\n      return {\n        ...model,\n        focusedCardId: message.payload.cardId\n      };\n    }\n    case \"dismiss focused card clicked\": {\n      return {\n        ...model,\n        focusedCardId: null\n      };\n    }\n    default: {\n      return model;\n    }\n  }\n}\n","import { Image } from \"./effects\";\n\nexport type Model = {\n  page: number;\n  images: Image[];\n  focusedCardId: string | null;\n};\n\nexport function initialModel(): Model {\n  return {\n    images: [],\n    page: 1,\n    focusedCardId: null\n  };\n}\n","import * as React from \"react\";\nimport { FixedSizeList } from \"react-window\";\n\nconst rowStaticStyle = {\n  display: \"grid\"\n};\n\ntype Props<T> = {\n  items: T[];\n  onEndReached: () => void;\n  onStartReached: () => void;\n  columns?: number;\n  height: number;\n  width: number;\n  renderItem: (item: T) => React.ReactChild;\n  endOffset?: number;\n  itemHeight?: number;\n  gap?: number;\n};\nexport function FeedList<T>({\n  items,\n  onEndReached,\n  columns = 3,\n  height,\n  width,\n  renderItem,\n  onStartReached,\n  endOffset = 0,\n  itemHeight,\n  gap = 5\n}: Props<T>) {\n  const rows = Math.ceil(items.length / columns);\n  const rowHeight = itemHeight || height;\n  const scrollHeightTotal = rows * rowHeight - (height - (itemHeight || 0));\n  return (\n    <FixedSizeList\n      style={{\n        overflowX: \"hidden\",\n        width,\n        height\n      }}\n      width={width}\n      height={height}\n      onScroll={({ scrollOffset, scrollDirection }) => {\n        if (scrollOffset === 0 && scrollDirection === \"backward\")\n          onStartReached();\n        else if (\n          scrollOffset >= scrollHeightTotal - rowHeight - endOffset &&\n          scrollDirection === \"forward\"\n        )\n          onEndReached();\n      }}\n      itemCount={rows}\n      itemSize={rowHeight}\n    >\n      {({ style, index }) => {\n        const renders: React.ReactChild[] = [];\n        for (let columnIndex = 0; columnIndex < columns; columnIndex++) {\n          const datum = items[index * columns + columnIndex];\n          if (datum) renders.push(renderItem(datum));\n        }\n        return (\n          <div\n            style={{\n              ...style,\n              ...rowStaticStyle,\n              gridTemplateColumns: `repeat(${columns}, 1fr)`,\n              gridGap: gap,\n              paddingBottom: gap\n            }}\n          >\n            {renders}\n          </div>\n        );\n      }}\n    </FixedSizeList>\n  );\n}\n","import React from \"react\";\nimport { css } from \"@emotion/core\";\n\nexport type CardProps = {\n  id: string;\n  uri: string;\n  title: string;\n  authorLink: string;\n  link: string;\n  author: string;\n  authorImage: string;\n  description: string;\n  onCardClicked?: (id: string) => void;\n  fallback?: string;\n};\n\nexport const Card = React.memo(function CardComponent({\n  id,\n  uri,\n  title,\n  link,\n  authorLink,\n  author,\n  authorImage,\n  description,\n  onCardClicked,\n  fallback\n}: CardProps) {\n  return (\n    <div\n      css={css`\n        height: 100%;\n        width: 100%;\n        overflow: hidden;\n        display: flex;\n        flex-direction: column;\n        border-radius: 4px;\n        box-shadow: 0 0 1px rgba(0, 0, 0, 0.5), -0 -0 1px #ffffff;\n      `}\n    >\n      <div\n        onClick={() => {\n          if (onCardClicked) onCardClicked(id);\n        }}\n        css={css`\n          flex: 1;\n          width: 100%;\n          align-self: center;\n          border-radius: 5;\n          background-color: ${fallback || \"transparent\"};\n          background-image: url(${uri});\n          background-size: cover;\n          background-position: center;\n          background-repeat: no-repeat;\n          backdrop-filter: blur(15px);\n        `}\n      />\n      <div\n        css={css`\n          flex: 1;\n          align-items: flex-start;\n          justify-content: flex-start;\n          flex-direction: column;\n          display: flex;\n          padding: 20px;\n        `}\n      >\n        <div\n          css={css`\n            flex: 0 0 50px;\n            width: 50px;\n            height: 50px;\n            align-self: center;\n            border-radius: 10px;\n            background-image: url(${authorImage});\n            background-size: cover;\n            box-shadow: 0 0 1px #cdcbce, -0 -0 1px #ffffff;\n          `}\n        />\n        <div\n          css={css`\n            flex: 0 0 10px;\n          `}\n        />\n        <div style={{ flex: 1, overflow: \"scroll\" }}>{description}</div>\n        <div\n          css={css`\n            flex: 0 0 10px;\n          `}\n        />\n        <span\n          css={css`\n            flex: 0;\n          `}\n        >\n          <a href={link}>{title}</a> by <a href={authorLink}>{author}</a>\n        </span>\n        <div\n          css={css`\n            flex: 0 0 10px;\n          `}\n        />\n      </div>\n    </div>\n  );\n});\n","import { css } from \"@emotion/core\";\n\nimport \"./index.css\";\nimport * as React from \"react\";\nimport { store, useTDispatch, useTSelector } from \"./store/\";\nimport { Provider } from \"react-redux\";\nimport { FeedList } from \"./components/FeedList\";\nimport { Card } from \"./components/Card\";\nimport { render } from \"react-dom\";\nimport useMeasure from \"react-use-measure\";\nimport { Image } from \"./store/effects\";\n/* eslint-disable @typescript-eslint/no-unused-vars */\nimport { Portal } from \"react-portal\";\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <Main />\n    </Provider>\n  );\n}\n\nfunction Main() {\n  const dispatch = useTDispatch();\n  const images = useTSelector(state => state.images);\n  const focusedCard = useTSelector(state =>\n    state.images.find(image => image.id === state.focusedCardId)\n  );\n  const [ref, { width, height }] = useMeasure();\n  const columns = React.useMemo(\n    () => (width <= 500 ? 1 : width <= 768 ? 2 : 3),\n    [width]\n  );\n  const renderCard = React.useCallback(\n    (item: Image) => (\n      <Card\n        id={item.id}\n        authorLink={item.user.links.html}\n        author={item.user.username}\n        description={item.description}\n        title={item.id}\n        fallback={item.color}\n        authorImage={item.user.profile_image.large}\n        link={item.links.html}\n        uri={item.urls.regular}\n        onCardClicked={cardId =>\n          void dispatch({ type: \"card clicked\", payload: { cardId } })\n        }\n      />\n    ),\n    [dispatch]\n  );\n  return (\n    <div\n      css={css`\n        padding: 10px;\n        width: 100%;\n        height: 100%;\n        flex: 1;\n      `}\n    >\n      <div\n        ref={ref}\n        css={css`\n          flex: 1;\n          height: 100%;\n          width: 100%;\n        `}\n      >\n        {focusedCard && (\n          <Portal>\n            <div\n              css={css`\n                position: fixed;\n                top: 0;\n                left: 0;\n                height: 100%;\n                width: 100%;\n                display: flex;\n                align-items: center;\n                justify-content: center;\n                flex-direction: column;\n                background: rgba(255, 255, 255, 0.5);\n                backdrop-filter: blur(12px);\n                padding: 20px;\n              `}\n              onClick={() =>\n                void dispatch({ type: \"dismiss focused card clicked\" })\n              }\n            >\n              <button\n                css={css`\n                  background: linear-gradient(145deg, #dde6e2, #ffffff);\n                  padding: 10px 20px;\n                  margin: 10px;\n                `}\n                onClick={() =>\n                  void dispatch({ type: \"dismiss focused card clicked\" })\n                }\n              >\n                Close\n              </button>\n              {renderCard(focusedCard)}\n            </div>\n          </Portal>\n        )}\n        <FeedList\n          items={images}\n          onStartReached={() => void dispatch({ type: \"feed start reached\" })}\n          onEndReached={() => void dispatch({ type: \"feed end reached\" })}\n          columns={columns}\n          width={width}\n          height={height}\n          gap={15}\n          itemHeight={height / 2}\n          endOffset={height / 2}\n          renderItem={renderCard}\n        />\n      </div>\n    </div>\n  );\n}\n\nrender(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}